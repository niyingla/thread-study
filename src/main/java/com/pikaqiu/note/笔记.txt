jps -l
查看运行的java线程id和文件名

jinfo -flags 【pid】
查看运行指定的参数信息

jstat -gcutil 【pid】
查看运行内存各个区域内存信息

jstat -class 【pid】
查看类加载信息

jstat -compiler 【pid】
查看类编译信息

jstat -gc 【pid】
查看各个区域内存使用和未使用情况

javac 编译 、javap 反编译

查看堆详细信息 各个区域配置大小 实际使用等详细信息
jmap -heap 【pid】

打印每个class的实例数目,内存占用,类全名信息.
jmap -histo 【pid】

下载内存信息 b 二进制格式 文件名字随便取
jmap -dump:format=b,file=dump.hprof 【pid】

查看线程栈信息
jstack 【pid】

打印线程信息
jstack -l 【pid】

jvisualvm（java自带监控） 使用jmx参数
#在tomcat的bin目录下，修改catalina.sh，添加如下的参数
CATALINA_OPTS="$CATALINA_OPTS
-Dcom.sun.management.jmxremote
-Djava.rmi.server.hostname=192.168.0.108
-Dcom.sun.management.jmxremote.port=9999
-Dcom.sun.management.jmxremote.rmi.port=9999
-Dcom.sun.management.jmxremote.ssl=false
-Dcom.sun.management.jmxremote.authenticate=false"
#这几个参数的意思是：
#‐Dcom.sun.management.jmxremote ：允许使用JMX远程管理
#‐Dcom.sun.management.jmxremote.port=9999 ：JMX远程连接端口
#‐Dcom.sun.management.jmxremote.authenticate=false ：不进行身份认证，任何用户都可以连接
#‐Dcom.sun.management.jmxremote.ssl=false ：不使用ssl

垃圾扫描算法
1 引用计数 2可达性分析（gcRoot）

垃圾回收算法
标记清除 标记压缩（年老代常用） 复制算法（年轻代常用）

cms
1 初始标记（stop the world 只标记部分直接引用对象）
2 并发标记 （并行 标记后续引用对象）
3 重复标记 （stop the world 并发重复标记 之前标记过的）
4 清理（未标记的）
5 重置cms过程各种状态

g1
2048分块 1-32m
碎片化管理，控制垃圾回收时间
每个区块 保留memberSet查找关联对象 管理gcRoot使用状态

垃圾回收器
serial（中断串行回收） parallel（中断多线程并行回收） cms (初始标记阶段和重新标记阶段中断但时间很短 停顿最好的 并发) G1

常用搭配
新+老 1 CMS parNew+CMS（控制停顿时间 算法标记清除 ）  2 paraller  paraller Scavenge + paraller （吞吐大）Old 3 G1  4 serial+ serial+serial Old
一般来说 新生代是复制算法 老年代是标记整理算法
